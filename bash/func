#!/bin/bash

the_eye() {
	if [ $? != 0 ]; then
		printf "\033[01;31m( O_o) "
	fi
}

backup() {
	mv $1 $1~
}

eskel() {
	cp /usr/portage/skel.ebuild ./$1.ebuild
	cp /usr/portage/skel.ChangeLog ./ChangeLog
	cp /usr/portage/skel.metadata.xml ./metadata.xml
	LC_ALL=C sed -i -e "s/<PACKAGE_NAME>-<PACKAGE_VERSION>-<PACKAGE_RELEASE>/$1/g" \
		-e "s/DD MMM YYYY/$(date '+%d %b %Y')/g" \
		-e 's/YOUR_NAME/Matt Adams/g' \
		-e 's/YOUR_EMAIL/matt@rtvision.com/g' ChangeLog
	sed -i -e 's/>@rtvision.com/>matt@rtvision.com/g' metadata.xml
}

etest() {
	ebuild $1 unpack && ebuild $1 compile && ebuild $1 install
}

prompt_git() {
	local s='';
	local branchName='';
	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then
		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;
			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;
			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
				fi;
			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;
			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;
		fi;
		# Get the short symbolic ref.
		# If HEAD isnt a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
		git rev-parse --short HEAD 2> /dev/null || \
		echo '(unknown)')";
		[ -n "${s}" ] && s=" [${s}]";
		echo -e "${1}${branchName}${blue}${s}";
	else
		return;
	fi;
}

# vim: ft=sh
